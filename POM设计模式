POM设计模式介绍：
POM模式是目前比较主流的设计模式，步骤：
1. 首先通过BasePage实现对页面公共方法的封装
2. 再将每个操作页面封装成一个对象，比如登录页面
3. 所有的页面对象都继承我们的BasePage，实现方法的复用，提高代码的可读性，便于维护

架构设计思路：
lib: 这个里面放我们的公共代码，包括一些工具、配置等等
    common:
        base_page.py: 公共内容，主要是一些公共方法的封装（名字也可以换成其他的，这里介绍的是UI）
    utils: 这个是我们的工具类

POM:
    login_page.py：这个包下面就放我们的页面对象
main.py


实际接口项目的架构：https://gitee.com/RampagingTestEngineers/API_TestFrameWork/tree/master
config:
    filePath：文件路径

data:
    case.xlsx
log:

public:

report


实际UI测试的架构：https://gitee.com/RampagingTestEngineers/UI_DDTFrameWork/tree/master
common:
    seleniumLibrary:
        action.py
        base.py
        cookie.py
        element.py
        .....
    tool:
        ...
config:
    **.ini
    filePathConfig.py
    urlConfig.py
data:
    **.csv
    **.yaml
page:
    baiduSearchPage.py
   baiduSetPage.py
scripts:
    baidu_search.py
    baidu_set.py



常见的错误解法：
1. 运行过程中提示文件不存在，无法运行，文件是历史项目已经被删除的文件
解法：在运行左边的框中选配置，把错误的文件路径调整过来

2. XFail:如果测试确实失败了，它会被认为是预期失败（xfail），并且会在测试报告中标记为成功。
   如果测试意外成功了，它会被认为是预期通过（xpass），这通常是一个警告信号，表明预期失败的原因可能已经不存在，或者测试本身的实现可能有问题。
   使用xfail标记的预期失败场景可能包括：
       尚未完成的功能或修复。
       在某些平台或环境上已知的问题。
       依赖于外部资源或服务的测试，当这些资源或服务暂时不可用时。
       尚未实现或尚未完成的测试逻辑。


